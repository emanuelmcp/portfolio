---
// src/components/TerminalNav.astro
const menuItems = [
  { id: "hero", label: "INICIO" },
  { id: "about", label: "SOBRE M√ç" },
  { id: "experience", label: "EXPERIENCIA" },
  { id: "projects", label: "PROYECTOS" },
  { id: "ai-chat", label: "PREGUNTA" },
  { id: "contact", label: "CONTACTO" },
];
---

<nav
  class="sticky top-0 z-50 border-b-2 border-primary/50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/90"
>
  <div class="container mx-auto px-4">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
      <div class="flex items-center gap-2 font-mono">
        <div class="flex items-center gap-1 text-primary">
          <span class="text-xl">{">"}</span>
          <span class="text-lg font-bold tracking-wider">DEV_</span>
        </div>
        <div
          id="time"
          class="hidden sm:inline text-muted-foreground font-mono tabular-nums"
        >
          [--:--:--]
        </div>
      </div>

      <!-- Navigation (desktop) -->
      <div id="nav-links" class="hidden md:flex items-center gap-1">
        {
          menuItems.map((item) => (
            <button
              id={`nav-${item.id}`}
              class="relative px-4 py-2 font-mono text-sm tracking-wide transition-all text-muted-foreground hover:text-primary cursor-pointer"
              data-section={item.id}
            >
              {item.label}
              <span class="indicator absolute bottom-0 left-0 right-0 h-0.5 bg-primary hidden" />
            </button>
          ))
        }
      </div>

      <!-- Mobile controls -->
      <div class="flex md:hidden items-center gap-3">
        <div
          id="time-mobile"
          class="text-muted-foreground font-mono tabular-nums"
        >
          [--:--:--]
        </div>
        <button
          id="menu-toggle"
          class="text-primary hover:text-primary/80 transition-colors"
          aria-label="Toggle menu"
        >
          <!-- √çconos: menu / close -->
          <svg id="icon-menu" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <svg id="icon-close" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile menu -->
    <div id="mobile-menu" class="hidden md:hidden border-t-2 border-primary/30 bg-background/98 backdrop-blur">
      <div class="py-4 space-y-1">
        {
          menuItems.map((item) => (
            <button
              class="w-full text-left px-4 py-3 font-mono text-sm tracking-wide transition-all border-l-4 border-transparent text-muted-foreground hover:text-primary hover:border-primary/50 hover:bg-primary/5"
              data-section={item.id}
            >
              <span class="text-primary mr-2">{">"}</span>
              {item.label}
            </button>
          ))
        }
      </div>
    </div>
  </div>
</nav>

<!-- üîπ Script: hora + secci√≥n activa + scroll suave + men√∫ m√≥vil -->
<script is:inline>
  // --- HORA ACTUALIZADA ---
  function updateTime() {
    const now = new Date();
    const formatted = now.toLocaleTimeString([], { hour12: false });
    document.querySelectorAll("#time, #time-mobile").forEach((el) => {
      if (el) el.textContent = `[${formatted}]`;
    });
  }
  updateTime();
  setInterval(updateTime, 1000);

  // --- SECCI√ìN ACTIVA ---
  const sections = ["hero", "about", "experience", "projects", "ai-chat", "contact"];
  const buttons = document.querySelectorAll("#nav-links button");
  const mobileButtons = document.querySelectorAll("#mobile-menu button");

  function setActiveSection(id) {
    [...buttons, ...mobileButtons].forEach((btn) => {
      const indicator = btn.querySelector(".indicator");
      if (btn.dataset.section === id) {
        btn.classList.add("text-primary");
        btn.classList.remove("text-muted-foreground");
        if (indicator) indicator.classList.remove("hidden");
      } else {
        btn.classList.remove("text-primary");
        btn.classList.add("text-muted-foreground");
        if (indicator) indicator.classList.add("hidden");
      }
    });
  }

  function handleScroll() {
    const scrollY = window.scrollY + window.innerHeight / 2;
    for (const id of sections) {
      const section = document.getElementById(id);
      if (!section) continue;
      const top = section.offsetTop;
      const height = section.offsetHeight;
      if (scrollY >= top && scrollY < top + height) {
        setActiveSection(id);
        break;
      }
    }
  }

  window.addEventListener("scroll", handleScroll);
  window.addEventListener("load", () => requestAnimationFrame(() => setTimeout(handleScroll, 50)));

  // --- SCROLL SUAVE ---
  function scrollToSection(id) {
    const el = document.getElementById(id);
    if (el) el.scrollIntoView({ behavior: "smooth" });
  }
  [...buttons, ...mobileButtons].forEach((btn) => {
    btn.addEventListener("click", () => {
      scrollToSection(btn.dataset.section);
      closeMobileMenu();
    });
  });

  // --- MEN√ö M√ìVIL ---
  const toggleBtn = document.getElementById("menu-toggle");
  const menu = document.getElementById("mobile-menu");
  const iconMenu = document.getElementById("icon-menu");
  const iconClose = document.getElementById("icon-close");

  function openMobileMenu() {
    menu.classList.remove("hidden");
    iconMenu.classList.add("hidden");
    iconClose.classList.remove("hidden");
  }

  function closeMobileMenu() {
    menu.classList.add("hidden");
    iconMenu.classList.remove("hidden");
    iconClose.classList.add("hidden");
  }

  toggleBtn.addEventListener("click", () => {
    const isOpen = !menu.classList.contains("hidden");
    isOpen ? closeMobileMenu() : openMobileMenu();
  });
</script>
